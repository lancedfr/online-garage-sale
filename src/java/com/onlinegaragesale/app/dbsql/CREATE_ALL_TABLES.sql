-- Generated by Oracle SQL Developer Data Modeler 3.1.2.704
--   at:        2012-10-07 12:52:25 CAT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g
DROP TABLE BID CASCADE CONSTRAINTS ;
DROP TABLE CATEGORY CASCADE CONSTRAINTS ;
DROP TABLE GARAGE CASCADE CONSTRAINTS ;
DROP TABLE PRODUCT CASCADE CONSTRAINTS ;
DROP TABLE PRODUCTSALES CASCADE CONSTRAINTS ;
DROP TABLE SALESHISTORY CASCADE CONSTRAINTS ;
DROP TABLE USERACCOUNT CASCADE CONSTRAINTS ;
DROP sequence BID_ID_SEQ ;
DROP sequence CATEGORY_ID_SEQ ;
DROP sequence GARAGE_ID_SEQ ;
DROP sequence PRODUCT_ID_SEQ ;
DROP sequence PRODUCTSALES_ID_SEQ ;
DROP sequence SALESHISTORY_ID_SEQ ;
DROP sequence USERACCOUNT_ID_SEQ ;
CREATE TABLE BID
  (
    BIDID     NUMBER NOT NULL ,
    BIDAMOUNT NUMBER (6,2) NOT NULL ,
    BIDSTATUS CHAR (1 BYTE) DEFAULT '0' ,
    USERID    NUMBER (19) NOT NULL ,
    PRODID    NUMBER (19) NOT NULL
  )
  TABLESPACE USERS LOGGING ;
CREATE UNIQUE INDEX BID_PK ON BID
  (
    BIDID ASC
  )
  TABLESPACE USERS LOGGING ;
  ALTER TABLE BID ADD CONSTRAINT BID_PK PRIMARY KEY
  (
    BIDID
  )
  USING INDEX BID_PK ;
  CREATE TABLE CATEGORY
    (
      CATEGORYID   NUMBER NOT NULL ,
      CATEGORYTYPE VARCHAR2 (255 BYTE)
    )
    TABLESPACE USERS LOGGING ;
CREATE UNIQUE INDEX CATEGORY_PK ON CATEGORY
  (
    CATEGORYID ASC
  )
  TABLESPACE USERS LOGGING ;
  CREATE INDEX CATEGORY_CATEGORYTYPE_INDEX ON CATEGORY
    (
      CATEGORYTYPE ASC
    )
    TABLESPACE USERS LOGGING ;
  ALTER TABLE CATEGORY ADD CONSTRAINT CATEGORY_PK PRIMARY KEY
  (
    CATEGORYID
  )
  USING INDEX CATEGORY_PK ;
  CREATE TABLE GARAGE
    (
      GARAGEID   NUMBER NOT NULL ,
      USERID     NUMBER (19) NOT NULL ,
      GARAGETYPE VARCHAR2 (255 BYTE) DEFAULT 'SMALL' ,
      OPENDATE DATE DEFAULT SYSDATE NOT NULL ,
      CLOSEDATE DATE
    )
    TABLESPACE USERS LOGGING ;
CREATE UNIQUE INDEX GARAGE_PK ON GARAGE
  (
    GARAGEID ASC
  )
  TABLESPACE USERS LOGGING ;
  ALTER TABLE GARAGE ADD CONSTRAINT GARAGE_PK PRIMARY KEY
  (
    GARAGEID
  )
  USING INDEX GARAGE_PK ;
  CREATE TABLE PRODUCT
    (
      PRODID        NUMBER (19) NOT NULL ,
      PRODCONDITION VARCHAR2 (255 BYTE) DEFAULT 'AVERAGE' ,
      PRODDESC      VARCHAR2 (255 BYTE) ,
      PRODIMAGE BLOB ,
      PRODPRICE  NUMBER (19,2) ,
      PRODSTATUS CHAR (1 BYTE) DEFAULT '0' ,
      GARAGEID   NUMBER NOT NULL ,
      CATEGORYID NUMBER NOT NULL
    )
    TABLESPACE USERS LOGGING LOB
    (
      PRODIMAGE
    )
    STORE AS
    (
      TABLESPACE USERS STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 BUFFER_POOL DEFAULT ) CHUNK 8192 RETENTION ENABLE STORAGE IN ROW NOCACHE LOGGING
    ) ;
CREATE UNIQUE INDEX PRODUCT_PK ON PRODUCT
  (
    PRODID ASC
  )
  TABLESPACE USERS LOGGING ;
  ALTER TABLE PRODUCT ADD CONSTRAINT PRODUCT_PK PRIMARY KEY
  (
    PRODID
  )
  USING INDEX PRODUCT_PK ;
  CREATE TABLE PRODUCTSALES
    (
      PRODID        NUMBER NOT NULL ,
      PRODCONDITION VARCHAR2 (255 BYTE) DEFAULT 'AVERAGE' ,
      PRODDESC      VARCHAR2 (255 BYTE) ,
      PRODIMAGE BLOB ,
      PRODPRICE NUMBER (6,2) ,
      USERID    NUMBER (19) NOT NULL ,
      BIDDERID  NUMBER (19) NOT NULL
    )
    TABLESPACE USERS LOGGING LOB
    (
      PRODIMAGE
    )
    STORE AS
    (
      TABLESPACE USERS STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 BUFFER_POOL DEFAULT ) CHUNK 8192 RETENTION ENABLE STORAGE IN ROW NOCACHE LOGGING
    ) ;
CREATE UNIQUE INDEX PRODUCTSALES_PK ON PRODUCTSALES
  (
    PRODID ASC
  )
  TABLESPACE USERS LOGGING ;
  ALTER TABLE PRODUCTSALES ADD CONSTRAINT PRODUCTSALES_PK PRIMARY KEY
  (
    PRODID
  )
  USING INDEX PRODUCTSALES_PK ;
  CREATE TABLE SALESHISTORY
    (
      USERID          NUMBER (19) NOT NULL ,
      TOTALSALES      NUMBER (6,2) ,
      TOTALSALESCOUNT NUMBER
    )
    TABLESPACE USERS LOGGING ;
  CREATE INDEX SALESHISTORY_USERID_IDX ON SALESHISTORY
    (
      USERID ASC
    )
    TABLESPACE USERS LOGGING ;
  ALTER TABLE SALESHISTORY ADD CONSTRAINT SALESHISTORY_PK PRIMARY KEY
  (
    USERID
  )
  USING INDEX SALESHISTORY_USERID_IDX ;
  CREATE TABLE USERACCOUNT
    (
      USERID     NUMBER (19) NOT NULL ,
      FIRSTNAME  VARCHAR2 (255 BYTE) NOT NULL ,
      MIDDLENAME VARCHAR2 (255 BYTE) ,
      LASTNAME   VARCHAR2 (255 BYTE) NOT NULL ,
      DOB DATE NOT NULL ,
      AGE             NUMBER (3) ,
      EMAIL           VARCHAR2 (255 BYTE) NOT NULL ,
      HOMETELL        VARCHAR2 (255 BYTE) ,
      WORKTELL        VARCHAR2 (255 BYTE) ,
      CELL            VARCHAR2 (255 BYTE) ,
      ADDRESSLINE     VARCHAR2 (255 BYTE) ,
      ROAD            VARCHAR2 (255 BYTE) ,
      CITY            VARCHAR2 (255 BYTE) ,
      SUBURB          VARCHAR2 (255 BYTE) ,
      COUNTRY         VARCHAR2 (255 BYTE) NOT NULL ,
      AREACODE        VARCHAR2 (255 BYTE) NOT NULL ,
      ACCOUNTPASSWORD VARCHAR2 (255 BYTE) NOT NULL
    )
    TABLESPACE USERS LOGGING ;
  CREATE INDEX USERACCOUNT_CITY_INDEX ON USERACCOUNT
    (
      CITY ASC
    )
    TABLESPACE USERS LOGGING ;
  CREATE INDEX USERACCOUNT_LASTNAME_INDEX ON USERACCOUNT
    (
      LASTNAME ASC
    )
    TABLESPACE USERS LOGGING ;
CREATE UNIQUE INDEX USERACCOUNT_PK ON USERACCOUNT
  (
    USERID ASC
  )
  TABLESPACE USERS LOGGING ;
  ALTER TABLE USERACCOUNT ADD CONSTRAINT USERACCOUNT_PK PRIMARY KEY
  (
    USERID
  )
  USING INDEX USERACCOUNT_PK ;
  ALTER TABLE BID ADD CONSTRAINT BID_PRODUCT_FK FOREIGN KEY
  (
    PRODID
  )
  REFERENCES PRODUCT
  (
    PRODID
  )
  NOT DEFERRABLE ;
  ALTER TABLE GARAGE ADD CONSTRAINT GARAGE_USERACCOUNT_FK FOREIGN KEY
  (
    USERID
  )
  REFERENCES USERACCOUNT
  (
    USERID
  )
  NOT DEFERRABLE ;
  ALTER TABLE PRODUCTSALES ADD CONSTRAINT PRODUCTSALES_SALESHISTORY_FK FOREIGN KEY
  (
    USERID
  )
  REFERENCES SALESHISTORY
  (
    USERID
  )
  NOT DEFERRABLE ;
  ALTER TABLE PRODUCT ADD CONSTRAINT PRODUCT_CATEGORY_FK FOREIGN KEY
  (
    CATEGORYID
  )
  REFERENCES CATEGORY
  (
    CATEGORYID
  )
  NOT DEFERRABLE ;
  ALTER TABLE PRODUCT ADD CONSTRAINT PRODUCT_GARAGE_FK FOREIGN KEY
  (
    GARAGEID
  )
  REFERENCES GARAGE
  (
    GARAGEID
  )
  NOT DEFERRABLE ;
  ALTER TABLE SALESHISTORY ADD CONSTRAINT SALESHISTORY_USERACCOUNT_FK FOREIGN KEY
  (
    USERID
  )
  REFERENCES USERACCOUNT
  (
    USERID
  )
  NOT DEFERRABLE ;
CREATE SEQUENCE BID_ID_SEQ INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20 ;
CREATE SEQUENCE CATEGORY_ID_SEQ INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20 ;
CREATE SEQUENCE GARAGE_ID_SEQ INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20 ;
CREATE SEQUENCE PRODUCTSALES_ID_SEQ INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20 ;
CREATE SEQUENCE PRODUCT_ID_SEQ INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20 ;
CREATE SEQUENCE SALESHISTORY_ID_SEQ INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20 ;
CREATE SEQUENCE USERACCOUNT_ID_SEQ INCREMENT BY 1 MAXVALUE 99999999 MINVALUE 1 CACHE 20 ;
CREATE OR REPLACE TRIGGER BID_BIDSTATUS_TRIG AFTER
  UPDATE OF BIDSTATUS ON BID FOR EACH ROW BEGIN IF :NEW.BIDSTATUS = '1' THEN ADD_SALES(:NEW.PRODID, :NEW.BIDAMOUNT, :NEW.USERID);
END IF;
END;
/
CREATE OR REPLACE TRIGGER BID_ID_TRG BEFORE
  INSERT ON BID FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN
  SELECT BID_ID_SEQ.NEXTVAL INTO :NEW.BIDID FROM DUAL;
END COLUMN_SEQUENCES;
END;
/
CREATE OR REPLACE TRIGGER CATEGORY_ID_TRG BEFORE
  INSERT ON CATEGORY FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN
  SELECT CATEGORY_ID_SEQ.NEXTVAL INTO :NEW.CATEGORYID FROM DUAL;
END COLUMN_SEQUENCES;
END;
/
CREATE OR REPLACE TRIGGER GARAGE_ID_TRG BEFORE
  INSERT ON GARAGE FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN
  SELECT GARAGE_ID_SEQ.NEXTVAL INTO :NEW.GARAGEID FROM DUAL;
END COLUMN_SEQUENCES;
END;
/
CREATE OR REPLACE TRIGGER PRODUCTSALES_ID_TRG BEFORE
  INSERT ON PRODUCTSALES FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN
  SELECT PRODUCTSALES_ID_SEQ.NEXTVAL INTO :NEW.PRODID FROM DUAL;
END COLUMN_SEQUENCES;
END;
/
CREATE OR REPLACE TRIGGER PRODUCT_ID_TRG BEFORE
  INSERT ON PRODUCT FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN
  SELECT PRODUCT_ID_SEQ.NEXTVAL INTO :NEW.PRODID FROM DUAL;
END COLUMN_SEQUENCES;
END;
/
CREATE OR REPLACE TRIGGER SALESHISTORY_ID_TRG BEFORE
  INSERT ON SALESHISTORY FOR EACH ROW BEGIN <<COLUMN_SEQUENCES>> BEGIN
  SELECT SALESHISTORY_ID_SEQ.NEXTVAL INTO :NEW.USERID FROM DUAL;
END COLUMN_SEQUENCES;
END;
/
CREATE OR REPLACE TRIGGER USERACCOUNT_ID_TRIG BEFORE
  INSERT ON USERACCOUNT FOR EACH ROW BEGIN :NEW.USERID := CREATE_USERACCOUNT_ID;
END;
/
CREATE OR REPLACE
PROCEDURE ADD_SALES
  (
    P_PRODID    IN NUMBER ,
    P_BIDAMOUNT IN NUMBER ,
    P_BIDDERID  IN NUMBER
  )
AS
  V_GARAGEID      NUMBER;
  V_USERID        NUMBER;
  V_PRODCONDITION VARCHAR2(255);
  V_PRODDESC      VARCHAR2(255);
  V_PRODIMAGE BLOB;
BEGIN
  V_GARAGEID := GET_GARAGEID_FROM_PRODID(P_PRODID);
  V_USERID   := GET_USERID_FROM_GARAGEID(V_GARAGEID);
  SELECT PRODCONDITION,
    PRODDESC,
    PRODIMAGE
  INTO V_PRODCONDITION,
    V_PRODDESC,
    V_PRODIMAGE
  FROM PRODUCT
  WHERE PRODID = P_PRODID;
  UPDATE SALESHISTORY
  SET TOTALSALES =
    (SELECT TOTALSALES FROM SALESHISTORY WHERE USERID = V_USERID
    ) + P_BIDAMOUNT,
    TOTALSALESCOUNT =
    (SELECT TOTALSALESCOUNT FROM SALESHISTORY WHERE USERID = V_USERID
    ) + 1
  WHERE USERID = V_USERID;
  INSERT
  INTO PRODUCTSALES
    (
      PRODID,
      PRODCONDITION,
      PRODDESC,
      PRODIMAGE,
      PRODPRICE,
      USERID,
      BIDDERID
    )
    VALUES
    (
      P_PRODID,
      V_PRODCONDITION,
      V_PRODDESC,
      V_PRODIMAGE,
      P_BIDAMOUNT,
      V_USERID,
      P_BIDDERID
    );
END ADD_SALES;
/
CREATE OR REPLACE
  FUNCTION CREATE_USERACCOUNT_ID
    RETURN NUMBER
  IS
  BEGIN
    RETURN TO_NUMBER(CONCAT(TO_CHAR(TO_CHAR(SYSDATE, 'YYYY')), USERACCOUNT_ID_SEQ.NEXTVAL), 99999999);
  EXCEPTION
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001,'AN ERROR WAS ENCOUNTERED - '||SQLCODE||' -ERROR- '||SQLERRM);
  END;
  /
CREATE OR REPLACE
FUNCTION GET_GARAGEID_FROM_PRODID
  (
    P_PRODID IN NUMBER
  )
  RETURN NUMBER
AS
  V_GARAGEID NUMBER;
BEGIN
  SELECT GARAGEID INTO V_GARAGEID FROM PRODUCT WHERE PRODID = P_PRODID;
  RETURN V_GARAGEID;
END GET_GARAGEID_FROM_PRODID;
/
CREATE OR REPLACE
FUNCTION GET_USERID_FROM_GARAGEID(
    P_GARAGEID IN NUMBER)
  RETURN NUMBER
AS
  V_USERID NUMBER;
BEGIN
  SELECT USERID INTO V_USERID FROM GARAGE WHERE GARAGEID = P_GARAGEID;
  RETURN V_USERID;
END GET_USERID_FROM_GARAGEID;
/
ALTER TRIGGER BID_ID_TRG DISABLE ;
ALTER TRIGGER CATEGORY_ID_TRG DISABLE ;
ALTER TRIGGER GARAGE_ID_TRG DISABLE ;
ALTER TRIGGER PRODUCT_ID_TRG DISABLE ;
ALTER TRIGGER PRODUCTSALES_ID_TRG DISABLE ;
ALTER TRIGGER SALESHISTORY_ID_TRG DISABLE ;
ALTER TRIGGER USERACCOUNT_ID_TRIG DISABLE ;
-- Oracle SQL Developer Data Modeler Summary Report:
--
-- CREATE TABLE                             7
-- CREATE INDEX                            10
-- ALTER TABLE                             13
-- CREATE VIEW                              0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         1
-- CREATE FUNCTION                          3
-- CREATE TRIGGER                           8
-- ALTER TRIGGER                            0
-- CREATE STRUCTURED TYPE                   0
-- CREATE COLLECTION TYPE                   0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          7
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
--
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
--
-- ERRORS                                   0
-- WARNINGS                                 0
